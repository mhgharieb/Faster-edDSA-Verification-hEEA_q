/*
 * Copyright (c) 2024 Muhammad ElSheikh (mhgaelsh@uwaterloo.ca). All rights reserved.
 * This file is part of the source code for the paper "Accelerating EdDSA Signature Verification with Faster Scalar Size Halving".
 * Licensed under the MIT License (for original modifications and new files).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
 * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include <gmp.h>
#include "../half_size/curve25519/curve25519_hEEA_vartime.h"
#include "../half_size/curve25519/curve25519_hgcd_vartime.h"

#define n_words_bignum256modm bignum256modm_limb_size
#define n_bytes_in_word_bignum256modm sizeof(bignum256modm_element_t)
#define nails_bits_bignum256modm_2_mpz 8*n_bytes_in_word_bignum256modm - bignum256modm_bits_per_limb
#define bignum256modm_2_mpz(out, in) mpz_import(out, n_words_bignum256modm, -1, n_bytes_in_word_bignum256modm, 0, nails_bits_bignum256modm_2_mpz, in);


/* bignum256modm to uint_64 */
void bignum256modm_2_u64(uint64_t *out, const bignum256modm in){
    out[0] = (in[0]      ) | ((in[1] & 0xFF) << 56);
    out[1] = (in[1] >>  8) | ((in[2] & 0xFFFF) << 48);
    out[2] = (in[2] >> 16) | ((in[3] & 0xFFFFFF) << 40);
    out[3] = (in[3] >> 24) | ((in[4] & 0xFFFFFFFF) << 32);
}

/* uint_64 to bignum256modm */
void u64_2_bignum256modm(bignum256modm out, const uint64_t *in){
    out[0] = in[0] & 0xFFFFFFFFFFFFFF;
    out[1] = (in[0] >> 56) | ((in[1] & 0xFFFFFFFFFFFF) << 8);
    out[2] = (in[1] >> 48) | ((in[2] & 0xFFFFFFFFFF) << 16);
    out[3] = (in[2] >> 40) | ((in[3] & 0xFFFFFFFF) << 24);
    out[4] = in[3] >> 32;
}

/* mpz to bignum256modm */
void mpz_2_bignum256modm(bignum256modm out, const mpz_t in) {
    size_t count,i;
    mpz_export((void *) out, &count, -1, n_bytes_in_word_bignum256modm, 0, nails_bits_bignum256modm_2_mpz, in);
    if (count < n_words_bignum256modm){
        for(i=count; i<n_words_bignum256modm; i++){
            out[i] = 0;
        };
    };
};


/* bignum256modm inverse mod el */
void inv256_modm(bignum256modm out, bignum256modm in){
    static mp_limb_t __m[4] = {
    0x5812631a5cf5d3ed,
    0x14def9dea2f79cd6,
    0x0000000000000000,
    0x1000000000000000
    };

	__mpz_struct _m = {
    	._mp_alloc = 4,
    	._mp_size = 4,
    	._mp_d = __m
	};
	mpz_t m = { _m };
    mpz_t x, y;
    mpz_inits(x,y, NULL);
    bignum256modm_2_mpz(x, in);
    mpz_invert(y, x, m);
    mpz_2_bignum256modm(out, y);
};

/* 'ge25519_unpack_positive_vartime' is similar to 'ge25519_unpack_negative_vartime' */
static int
ge25519_unpack_positive_vartime(ge25519 *r, const unsigned char p[32]) {
	static const unsigned char zero[32] = {0};
	static const bignum25519 one = {1};
	unsigned char parity = p[31] >> 7;
	unsigned char check[32];
	bignum25519 t, root, num, den, d3;

	curve25519_expand(r->y, p);
	curve25519_copy(r->z, one);
	curve25519_square(num, r->y); /* x = y^2 */
	curve25519_mul(den, num, ge25519_ecd); /* den = dy^2 */
	curve25519_sub_reduce(num, num, r->z); /* x = y^1 - 1 */
	curve25519_add(den, den, r->z); /* den = dy^2 + 1 */

	/* Computation of sqrt(num/den) */
	/* 1.: computation of num^((p-5)/8)*den^((7p-35)/8) = (num*den^7)^((p-5)/8) */
	curve25519_square(t, den);
	curve25519_mul(d3, t, den);
	curve25519_square(r->x, d3);
	curve25519_mul(r->x, r->x, den);
	curve25519_mul(r->x, r->x, num);
	curve25519_pow_two252m3(r->x, r->x);

	/* 2. computation of r->x = num * den^3 * (num*den^7)^((p-5)/8) */
	curve25519_mul(r->x, r->x, d3);
	curve25519_mul(r->x, r->x, num);

	/* 3. Check if either of the roots works: */
	curve25519_square(t, r->x);
	curve25519_mul(t, t, den);
	curve25519_sub_reduce(root, t, num);
	curve25519_contract(check, root);
	if (!ed25519_verify(check, zero, 32)) {
		curve25519_add_reduce(t, t, num);
		curve25519_contract(check, t);
		if (!ed25519_verify(check, zero, 32))
			return 0;
		curve25519_mul(r->x, r->x, ge25519_sqrtneg1);
	}

	curve25519_contract(check, r->x);
	if ((check[0] & 1) != parity) {
		curve25519_copy(t, r->x);
		curve25519_neg(r->x, t);
	}
	curve25519_mul(r->t, r->x, r->y);
	return 1;
}

/* half_size_scalar using hEEA */
void curve25519_half_size_scalar_vartime_hEEA(bignum256modm rho, bignum256modm tau, bignum256modm v, int *rho_isNegative, int *tau_isNegative){
    uint64_t v_64[4], rho_64[4] = {0}, tau_64[4] = {0};
    bignum256modm_2_u64(v_64, v);
    curve25519_hEEA_vartime(rho_64, tau_64, v_64);
    *rho_isNegative = rho_64[1] >> 63;
	if (*rho_isNegative){
		rho_64[0] = ~rho_64[0];
		rho_64[1] = ~rho_64[1];
		if (++rho_64[0] == 0) {
			rho_64[1]++;
		}
	}
	*tau_isNegative = tau_64[1] >> 63;
	if (*tau_isNegative){
		tau_64[0] = ~tau_64[0];
		tau_64[1] = ~tau_64[1];
		if (++tau_64[0] == 0) {
			tau_64[1]++;
		}
	}
    u64_2_bignum256modm(rho, rho_64);
    u64_2_bignum256modm(tau, tau_64);
}

/* half_size_scalar using hgcd_enhance2 */
void curve25519_half_size_scalar_vartime_hgcd(bignum256modm rho, bignum256modm tau, bignum256modm v, int *rho_isNegative, int *tau_isNegative){
    uint64_t v_64[4], rho_64[4] = {0}, tau_64[4] = {0};
    bignum256modm_2_u64(v_64, v);
	int rho_64_size, tau_64_size;
    curve25519_hgcd_vartime_enhance2(rho_64, tau_64, v_64, &rho_64_size, &tau_64_size);
    *rho_isNegative = 0;
    // *rho_isNegative = rho_64[1] >> 63;
	// if (*rho_isNegative){
	// 	rho_64[0] = ~rho_64[0];
	// 	rho_64[1] = ~rho_64[1];
	// 	if (++rho_64[0] == 0) {
	// 		rho_64[1]++;
	// 	}
	// }
	*tau_isNegative = tau_64[1] >> 63;
	if (*tau_isNegative){
		tau_64[0] = ~tau_64[0];
		tau_64[1] = ~tau_64[1];
		if (++tau_64[0] == 0) {
			tau_64[1]++;
		}
	}
    u64_2_bignum256modm(rho, rho_64);
    u64_2_bignum256modm(tau, tau_64);
}


// /* computes [s1]p1 + [s2]p2 + [s3]basepoint */
// static void 
// ge25519_triple_scalarmult_vartime(ge25519 *r, const ge25519 *p1, const ge25519 *p2, const bignum256modm s1, const bignum256modm s2, const bignum256modm s3) {
// 	signed char slide1[256], slide2[256], slide3[256];
// 	ge25519_pniels pre1[S1_TABLE_SIZE], pre2[S1_TABLE_SIZE];
// 	ge25519 d1, d2;
// 	ge25519_p1p1 t;
// 	int32_t i;

// 	contract256_slidingwindow_modm(slide1, s1, S1_SWINDOWSIZE);
// 	contract256_slidingwindow_modm(slide2, s2, S1_SWINDOWSIZE);
// 	contract256_slidingwindow_modm(slide3, s3, S2_SWINDOWSIZE);
    

// 	ge25519_double(&d1, p1);
// 	ge25519_full_to_pniels(pre1, p1);
// 	ge25519_double(&d2, p2);
// 	ge25519_full_to_pniels(pre2, p2);
// 	for (i = 0; i < S1_TABLE_SIZE - 1; i++){
// 		ge25519_pnielsadd(&pre1[i+1], &d1, &pre1[i]);
// 		ge25519_pnielsadd(&pre2[i+1], &d2, &pre2[i]);
//     }

// 	/* set neutral */
// 	memset(r, 0, sizeof(ge25519));
// 	r->y[0] = 1;
// 	r->z[0] = 1;

// 	i = 255;
// 	while ((i >= 0) && !(slide1[i] | slide2[i] | slide3[i]))
// 		i--;

// 	for (; i >= 0; i--) {
// 		ge25519_double_p1p1(&t, r);
// 		if (slide1[i]) {
// 			ge25519_p1p1_to_full(r, &t);
//             ge25519_pnielsadd_p1p1(&t, r, &pre1[abs(slide1[i]) / 2], (unsigned char)slide1[i] >> 7);
// 		}

// 		if (slide2[i]) {
// 			ge25519_p1p1_to_full(r, &t);
// 			ge25519_pnielsadd_p1p1(&t, r, &pre2[abs(slide2[i]) / 2], (unsigned char)slide2[i] >> 7);
// 		}

// 		if (slide3[i]) {
// 			ge25519_p1p1_to_full(r, &t);
// 			ge25519_nielsadd2_p1p1(&t, r, &ge25519_niels_sliding_multiples[abs(slide3[i]) / 2], (unsigned char)slide3[i] >> 7);
// 		}

// 		ge25519_p1p1_to_partial(r, &t);
// 	}
// }


/* precomputed table for B_par = 2^126 B */
static const ge25519_niels ge25519_niels_sliding_multiples2[32] = {
    {{0x0007d60613037524,0x0006d61f784d4a6b,0x0007a642bb8842b7,0x0005fcd646854d91,0x00047204d08d72fd},{0x00042eb30d4b497f,0x0000d7379990e0e4,0x000045bd147be58c,0x0005821bca849a6c,0x00005468d6201405},{0x000565a9f93267de,0x0001b81ab1d1401e,0x0004638a3b3b3f5e,0x0001a9510af16e79,0x0004599ee919b633}},
    {{0x0003e91d6a54c980,0x0004bea21b31f482,0x00003d89195529dc,0x0002dfb56143562d,0x000105ba38985c82},{0x0007016a267dad09,0x00013456fa6c6691,0x00001c884cbd635b,0x0003284bbadd2ca7,0x000759d087ff9e6a},{0x000380dd9d8a5ddb,0x0003320b0498f7f5,0x0002ad92e05bbd89,0x0005fdb1ff38b519,0x0005461548ae00ae}},
    {{0x00069de9527493ab,0x00023843fe9e9a6d,0x0004c1d43378cd4b,0x0007be63da56c8bb,0x00010bef1d8a6961},{0x00007f5d47d18c38,0x00077b1c7b48f0ef,0x000548150d4d51aa,0x0000715463304c16,0x000476fc511210d5},{0x0000d28d62a1b8c1,0x00074d63f2d24c1d,0x00020ad27a48d66b,0x00063f763b89b401,0x0005e9c111f1bbdd}},
    {{0x000317abc651ecc4,0x00045b5b9aa572a5,0x00048880fb38fff1,0x000220c6b87831b7,0x000212ff1fa04498},{0x00010b75a08d0c28,0x000251ebbf08a51d,0x000092dd2fae8118,0x00045b9acc9784d1,0x000489ad71d18519},{0x000195799f52209f,0x0002cf3e4bb3e0c7,0x00041bc78cf28aa1,0x00032742ca068ade,0x00057df53c1085ab}},
    {{0x0002fb343143df91,0x0002e2abb1386e75,0x000191c95796167c,0x0007f2ba7e4434a5,0x000526642f7b8b9b},{0x00076f0a4835ea15,0x00031c9f24e15f4e,0x0005e394cd1f49e9,0x00016e3cfece5b71,0x0003cf0ec6da7418},{0x0004c6ea23d63436,0x0002a302e70fb4be,0x00053c41d1863e44,0x00003f8129248a4f,0x0004e9b5b1c1b001}},
    {{0x00027aca52792fdc,0x00067768afe14104,0x00063d12e5c3e3dc,0x0006935610ebff2b,0x00077781e77abe0f},{0x0003072292c284bf,0x00078bb80408ebf8,0x0007d1de1fe88c02,0x0003c5d2c9afcb90,0x00055162f70acd57},{0x0006e29b5d6c8a2e,0x00074b59260b9bd2,0x0003639e166c1cdc,0x00030c4ad24700b5,0x0000c15656b2383a}},
    {{0x00018f2ede49bb66,0x0000a207b1e13ca7,0x00067119b1b4baeb,0x0001bed53d974613,0x0005612e6ff2d202},{0x0001adb8c2ab09b0,0x0006d7557752d5b5,0x000784f548c0619a,0x0005481758cadfaa,0x0005a5a0fa21d62a},{0x0007be5c45379ca1,0x0007a467c505a3b2,0x000158765ea786ab,0x00013b80a01a33ce,0x00016c56fb9e6b60}},
    {{0x000161e9086365cd,0x000182b07cf04deb,0x00077c3a7a266aa3,0x0007b033899e4a45,0x000241d6697a0c10},{0x00027e63f3be17be,0x0007ef4bf3b88bec,0x00057a7f2508b146,0x0001c911dd650016,0x00060f451fcab5b6},{0x00014cf1a7efff7b,0x000029b1a9689ec3,0x0007b28d8ee6335a,0x000009986887d911,0x0004bd0b8881a482}},
    {{0x0006dfa4449a9164,0x00011f50c12a0bdc,0x00043bab873e5de4,0x000658115a82b5bd,0x000382c794f610b7},{0x000693039b778df1,0x0002d94bd65af452,0x000309b0550a2bc7,0x0007ade29b0e667d,0x0001d6b2f9986fdc},{0x00066dfbf2263b59,0x00075ae83fe1da13,0x000763238b3c7519,0x00070998a0ddc855,0x0002a8dbf0931987}},
    {{0x0003d68616f7433c,0x00020cc54c27826d,0x0004d292c87c1b0f,0x000666989d4f2384,0x0004f9e0c9864502},{0x0007a5498bea9a69,0x00079f439740e455,0x0000a0afa8789917,0x0007e66a50bcad90,0x0005923d05ff17c0},{0x000444d2573f0ee9,0x000557a0e6136632,0x0007670f80cc81be,0x0003dea55014566a,0x0004eaf009ad2613}},
    {{0x000701b2085f0eef,0x00004c7ff66d74d6,0x0001589809bd857b,0x0001cbdb94929e1e,0x000626a05d50d4e6},{0x0007ca37420e18c0,0x00050499b41e1e5b,0x00034bb46a0d56dd,0x000723611896fd4c,0x0005b43e6275b9f5},{0x00023e730e6fc24f,0x00048023f487e0ad,0x0005b0a3794aad5d,0x0000e9be543ad5e9,0x00071288f1b8759b}},
    {{0x00003a2c0d3e47b0,0x00010b99f812d3c6,0x000144de340416e3,0x0005c777232a1095,0x0006ec17664ba6bb},{0x0003a5eb9692e387,0x0005993120b662c1,0x000563083b7cb17f,0x0005336b11d5826a,0x0002c9254222b62e},{0x000607207d1bef26,0x0001614f23f5a3da,0x00065afe553b9092,0x0005f29cf77b44a5,0x000712b8e3986acd}},
    {{0x00052b3cd8a711fc,0x0002cbc15e394341,0x000502bd0bee5478,0x00008956352ad433,0x000356dd9e4ae62f},{0x00032db0ca1b92db,0x000165cfd2c36995,0x000297e7cb7c8ca5,0x0003af4a66d89b2c,0x0006348575c25672},{0x000241c2ef612f4f,0x0002a3c18e5e514e,0x0005b93a900b723e,0x0002fe80e2df8a59,0x0007124b72e418a4}},
    {{0x000217e9928db2f7,0x0001d0266ff07264,0x00038d5add5f17e8,0x0001016c64db3ab4,0x0004a5b586a1ddc4},{0x000712f87fd2ccf4,0x00065f3ebea8edd6,0x000468b29cf92012,0x0001c38877a5c662,0x00074a03e7701f30},{0x00033aa637f2d184,0x0000724b33292843,0x0006cd05a56cf338,0x0006b9b424b7e50b,0x000607dc2e9a157c}},
    {{0x00063d77d0c4ee14,0x000478393888a371,0x0004b1268457ab8b,0x000236b81bcae93a,0x0000564a1c113a97},{0x000659e007d81be4,0x0003b96b2efe1421,0x00034d3b9a730d4a,0x00061b8d78351117,0x00066f0575336154},{0x000388dcf109d53e,0x000155ad4aada861,0x0007cbcafc95d3ec,0x000366d89592f17d,0x00011585acec385f}},
    {{0x0001f19f78c044db,0x00036806aa6c7814,0x0005aab4501a83d3,0x0007f78ea07edd28,0x0000e19c01cc1554},{0x0002d01e6cef9d4e,0x0004f89180615494,0x000416f56ff73f64,0x0002c007d2795965,0x000333c2319a1cdb},{0x000235ae2f695126,0x0003ebd8668ab7ce,0x0007e8039238345f,0x0007966e3f1c87c3,0x0006ed7c6cd428b0}},
    {{0x0007caaf2802991b,0x000327350ca81f2c,0x0004b75e7ba5f70b,0x00055edd1ee93446,0x00027677fa3055f2},{0x00035f61f09b366e,0x00069a10faa736a0,0x0004ac47c40c2897,0x0006d99e1ca16f0f,0x0005a5c9bca68cd1},{0x0005ad9a8b9ad766,0x00067ec631af9520,0x0005924a8a827b19,0x0003287dc2a82c1d,0x00057e763e2e93a9}},
    {{0x0006440add4bc8ab,0x0002b909e072544f,0x00035c5452101a9c,0x0003c9cb114f6cc9,0x00043dc66163e30f},{0x00039f6d612eb4d0,0x00040e64f4cda063,0x0007eb79583e38bf,0x0004467ed3e4cddf,0x00016b1400b9d9c5},{0x0005cf10e4020b7c,0x0007ade5fb94e10d,0x000516c2f28e2b1e,0x0001c9d8fdc8e816,0x0005968804e08936}},
    {{0x00063cbf6e40f5a6,0x00073ca80b2708b7,0x0003e203a0f20e76,0x0001963fa22cc13f,0x0000b936019169e6},{0x00049d308ef60c17,0x00032de95f834da1,0x000198b0b2291739,0x0007fd8601fa5bdd,0x0007258c5e68b5ba},{0x0001531cf5138d59,0x0006107c3f297133,0x00026fd40a8f8bb9,0x00065f5cc960ca9b,0x00055c1d4a3351f2}},
    {{0x0001f0d8da83fe1b,0x0002cfe400dad1bb,0x0001108ce40a675d,0x0005c27b26a0c0d2,0x00053b5625b6820f},{0x000554db2e2d20fa,0x0002dfedec37aae7,0x0003b6cafe9adf02,0x00020e301113913d,0x0000d6a947583924},{0x0004e930171834f7,0x000607b68a94eac1,0x0005ce0a80aad80a,0x0001d78f46322dc5,0x0006044faf707b74}},
    {{0x0000904c4750a99d,0x000505e677290aa7,0x0003385f486e02a1,0x00079d22025820b4,0x00042659d40d3270},{0x0000baf461600752,0x0001c6d1da2eacea,0x000382b0f311d0d4,0x000296b66f101e99,0x00016ce2a475bd5a},{0x000569521c20fa07,0x00027ece81a385dc,0x00024a2a9e1bba2f,0x000721c37c2861e7,0x00055066e8d2d80d}},
    {{0x0003323e7b9c269d,0x0004425734d4e85e,0x0006cbea9e16dfcd,0x00066cdf51505120,0x000518b5023bf335},{0x00013889e8cab503,0x000005fc4ea33e0e,0x0007afeef2672094,0x00005b71b656170f,0x00047c62feef0e23},{0x000538b15b00d1bc,0x0006ff9518e3ea3f,0x000493aaa12b747b,0x0007fcd076fe8235,0x00060683c3e63bd7}},
    {{0x000196c2846a0574,0x0001212f11701ca7,0x00075d10f195742e,0x0002b84a6ae92c03,0x00000512861f11d9},{0x0007621dd41d8fd8,0x00047688a3c72b13,0x0001d2a477db7236,0x0007e8ce57f835e8,0x0001277ac6f337f3},{0x0006d666646682d4,0x000388644cfbfbdc,0x000079bc569c0a8c,0x0001416ae7a020a3,0x0000d7683c6e01cd}},
    {{0x00021334f8ebdfe0,0x0005ad6612be8534,0x0006de86f9b94953,0x000625167d0b452c,0x000638a96f588500},{0x000422d17e5d0176,0x000652c668b742c7,0x0007a1cbaeab72b4,0x0001bbaadf3bbae1,0x00054300374a5e1d},{0x000374cf693957a1,0x00069c1b7cac8b6e,0x0006b5a5a186fb19,0x0005d2387044b03e,0x000340db2ba2ea96}},
    {{0x0007b4ffa8b7c8bf,0x0007dc2a7949daeb,0x000779e7bb926b2f,0x0000210aacf50dfb,0x00027292ced9b817},{0x000306e805f3f6c7,0x0000e8e5009ea9ac,0x00036925c6d82512,0x0004e40f8acc8013,0x000329c9d10a9043},{0x00059805ce47a565,0x00009db4d26aeb10,0x0005e683a53f56ad,0x000117ae6b79d5af,0x000390a93b3622c5}},
    {{0x000650a504820d54,0x0006c24320fe7852,0x0004c43c6cca5f11,0x0001ab587f87768f,0x0000a597ed6425c1},{0x0003eac3c00a848d,0x0007e0c779c28641,0x0004a987c4b30f33,0x00061493ea8ef71b,0x0004400ffc9e28e1},{0x000433e40b727304,0x00015a51d7853867,0x000467f715763f8a,0x0004dcc1d6617f8f,0x00034a1898faadc8}},
    {{0x0001cdb3f141949e,0x00016f93cbc62aa3,0x0002afcb4b38c6ee,0x0006ee99924162ef,0x00027619519526fe},{0x000752e0533be6d8,0x000515931a89aa6d,0x000172e1e58c27b9,0x000041171660f6cc,0x0006d8a6d74898df},{0x0001afbb604976a8,0x00040076ea3c819b,0x0000d76b8f99c1ea,0x00041b31f68fc44a,0x000040116617167a}},
    {{0x0005080d234ee25c,0x00046e1d79d99702,0x0007af905199af6b,0x0002385badbe3a57,0x00062772d2affd09},{0x0000c4f4fc794eb8,0x0001903a8f1bbb20,0x000579d88659a0ce,0x0005c6cbf04ba18c,0x0007e2d5cb6049e0},{0x00017116425389a7,0x0002511de61a73e6,0x000527fb65b877cf,0x00005044d57099e0,0x0004ecf62ab8fb47}},
    {{0x000064bbcb80e261,0x0002ec42dc4ed58c,0x0005711d3cf21183,0x000496826c2416c9,0x00012e8463c36dff},{0x0001c8736a531682,0x000525932b477ace,0x0003c03f2adc1268,0x0005faad75d0ddff,0x00019d994c407845},{0x00016da604a9839c,0x0005a1d81e84e3d1,0x0002c3b74fe50eff,0x0002b88defcec01c,0x000570271f677c38}},
    {{0x0005dc5a6eecbe50,0x0004c96c97db65f4,0x00062079bfc99388,0x0001b706ead2179c,0x0004fb180f4af230},{0x0005a7a4e013d531,0x00008e9730770c96,0x00036ca7e5027e5a,0x0006a199e6524d97,0x00030a43d672f7d1},{0x0000abe1152a5ebf,0x00041890dd0a1257,0x000791d8fd408922,0x00040e35458eef54,0x0005354e47ac0f8b}},
    {{0x000290854a246e5d,0x000156b92e0cc33a,0x00046c23aec7ae80,0x0004f0b86c2d6dbe,0x0005b80e635e8883},{0x00048b301987243c,0x0001374239ad024c,0x0005fb8f64af25aa,0x00048637d226b7e2,0x0002a16b07183262},{0x0005176b03972c7f,0x00040c054dfca2c6,0x0001004115856d50,0x00058c336e4df7f7,0x0000afcba6e89af5}},
    {{0x00053ccd3bf9092f,0x00058bd5e4088660,0x00023146143db175,0x0007b675361d5590,0x0000e8644d95fb23},{0x0005c0e23dde23d2,0x0003152dd99f0b83,0x0002a9b3a7073f1b,0x000640543689625f,0x000388a8e62af42c},{0x0005e7a5f60f452b,0x0002dbd33004ba75,0x0004165797d8a89c,0x00030b6e5272a429,0x00079f06033f05a1}}
};


/* QSM_B_B' */
/* computes [s1]p1 + [s2]p2 + [s3]basepoint + [s4 * 2^126] basepoint */
/* computes [s1]p1 + [s2]p2 + [s3]B + [s4]B_par */
static void 
ge25519_quadruple_scalarmult_vartime(ge25519 *r, const ge25519 *p1, const ge25519 *p2, const bignum256modm s1, const bignum256modm s2, const bignum256modm s3, const bignum256modm s4) {
	signed char slide1[256], slide2[256], slide3[256], slide4[256];
	ge25519_pniels pre1[S1_TABLE_SIZE], pre2[S1_TABLE_SIZE];
	ge25519 d1, d2;
	ge25519_p1p1 t;
	int32_t i;

	contract256_slidingwindow_modm(slide1, s1, S1_SWINDOWSIZE);
	contract256_slidingwindow_modm(slide2, s2, S1_SWINDOWSIZE);
	contract256_slidingwindow_modm(slide3, s3, S2_SWINDOWSIZE);
	contract256_slidingwindow_modm(slide4, s4, S2_SWINDOWSIZE);
    
	ge25519_double(&d1, p1);
	ge25519_full_to_pniels(pre1, p1);
	ge25519_double(&d2, p2);
	ge25519_full_to_pniels(pre2, p2);
	for (i = 0; i < S1_TABLE_SIZE - 1; i++){
		ge25519_pnielsadd(&pre1[i+1], &d1, &pre1[i]);
		ge25519_pnielsadd(&pre2[i+1], &d2, &pre2[i]);
    }

	/* set neutral */
	memset(r, 0, sizeof(ge25519));
	r->y[0] = 1;
	r->z[0] = 1;

	i = 255;
	while ((i >= 0) && !(slide1[i] | slide2[i] | slide3[i] | slide4[i]))
		i--;

	for (; i >= 0; i--) {
		ge25519_double_p1p1(&t, r);

		if (slide1[i]) {
			ge25519_p1p1_to_full(r, &t);
            ge25519_pnielsadd_p1p1(&t, r, &pre1[abs(slide1[i]) / 2], (unsigned char)slide1[i] >> 7);
		}

		if (slide2[i]) {
			ge25519_p1p1_to_full(r, &t);
			ge25519_pnielsadd_p1p1(&t, r, &pre2[abs(slide2[i]) / 2], (unsigned char)slide2[i] >> 7);
		}

		if (slide3[i]) {
			ge25519_p1p1_to_full(r, &t);
			ge25519_nielsadd2_p1p1(&t, r, &ge25519_niels_sliding_multiples[abs(slide3[i]) / 2], (unsigned char)slide3[i] >> 7);
		}

		if (slide4[i]) {
			ge25519_p1p1_to_full(r, &t);
			ge25519_nielsadd2_p1p1(&t, r, &ge25519_niels_sliding_multiples2[abs(slide4[i]) / 2], (unsigned char)slide4[i] >> 7);
		}

		ge25519_p1p1_to_partial(r, &t);
	}
}

/* B_par = [2^126] basepoint */
static const ge25519 ge25519_B_par = {
    {0x00022c567d23ea24,0x0001008c10a1cb3c,0x00004fbd2c79d16a,0x0007c2a2c1ffa66d,0x0001f13202c95083},
    {0x0002025c90275f48,0x0007d6ab88ef15a8,0x0007f5ffe8021421,0x0005bf790884f3fe,0x00066336d356c381},
    {0x0000000000000001,0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000},
    {0x00018564b1c35b4d,0x0007e436bbed8835,0x0000253b45153643,0x0003c29806a11a66,0x00058f25481ba473}
	};
	
/* QSM_B */
/* computes [s1]p1 + [s2]p2 + [s3]basepoint + [s4 * 2^126] basepoint */
/* computes [s1]p1 + [s2]p2 + [s3]B + [s4]B_par */
static void 
ge25519_quadruple_scalarmult_samePre_vartime(ge25519 *r, const ge25519 *p1, const ge25519 *p2, const bignum256modm s1, const bignum256modm s2, const bignum256modm s3, const bignum256modm s4) {
	signed char slide1[256], slide2[256], slide3[256], slide4[256];
	ge25519_pniels pre1[S1_TABLE_SIZE], pre2[S1_TABLE_SIZE], pre4[S1_TABLE_SIZE];
	ge25519 d1, d2, d4;
	ge25519_p1p1 t;
	int32_t i;

	contract256_slidingwindow_modm(slide1, s1, S1_SWINDOWSIZE);
	contract256_slidingwindow_modm(slide2, s2, S1_SWINDOWSIZE);
	contract256_slidingwindow_modm(slide3, s3, S2_SWINDOWSIZE);
	contract256_slidingwindow_modm(slide4, s4, S1_SWINDOWSIZE);
    
	ge25519_double(&d1, p1);
	ge25519_full_to_pniels(pre1, p1);
	ge25519_double(&d2, p2);
	ge25519_full_to_pniels(pre2, p2);
	ge25519_double(&d4, &ge25519_B_par);
	ge25519_full_to_pniels(pre4, &ge25519_B_par);



	for (i = 0; i < S1_TABLE_SIZE - 1; i++){
		ge25519_pnielsadd(&pre1[i+1], &d1, &pre1[i]);
		ge25519_pnielsadd(&pre2[i+1], &d2, &pre2[i]);
		ge25519_pnielsadd(&pre4[i+1], &d4, &pre4[i]);
    }

	/* set neutral */
	memset(r, 0, sizeof(ge25519));
	r->y[0] = 1;
	r->z[0] = 1;

	i = 255;
	while ((i >= 0) && !(slide1[i] | slide2[i] | slide3[i] | slide4[i]))
		i--;

	for (; i >= 0; i--) {
		ge25519_double_p1p1(&t, r);

		if (slide1[i]) {
			ge25519_p1p1_to_full(r, &t);
            ge25519_pnielsadd_p1p1(&t, r, &pre1[abs(slide1[i]) / 2], (unsigned char)slide1[i] >> 7);
		}

		if (slide2[i]) {
			ge25519_p1p1_to_full(r, &t);
			ge25519_pnielsadd_p1p1(&t, r, &pre2[abs(slide2[i]) / 2], (unsigned char)slide2[i] >> 7);
		}

		if (slide3[i]) {
			ge25519_p1p1_to_full(r, &t);
			ge25519_nielsadd2_p1p1(&t, r, &ge25519_niels_sliding_multiples[abs(slide3[i]) / 2], (unsigned char)slide3[i] >> 7);
		}

		// if (slide4[i]) {
		// 	ge25519_p1p1_to_full(r, &t);
		// 	ge25519_nielsadd2_p1p1(&t, r, &ge25519_niels_sliding_multiples2[abs(slide4[i]) / 2], (unsigned char)slide4[i] >> 7);
		// }
		if (slide4[i]) {
			ge25519_p1p1_to_full(r, &t);
			ge25519_pnielsadd_p1p1(&t, r, &pre4[abs(slide4[i]) / 2], (unsigned char)slide4[i] >> 7);
		}

		ge25519_p1p1_to_partial(r, &t);
	}
}

/* the precomputed table for B is doubled */
static const ge25519_niels ge25519_niels_sliding_multiples_2B[64] = {
    {{0x00003905d740913e,0x0000ba2817d673a2,0x00023e2827f4e67c,0x000133d2e0c21a34,0x00044fd2f9298f81},{0x000493c6f58c3b85,0x0000df7181c325f7,0x0000f50b0b3e4cb7,0x0005329385a44c32,0x00007cf9d3a33d4b},{0x00011205877aaa68,0x000479955893d579,0x00050d66309b67a0,0x0002d42d0dbee5ee,0x0006f117b689f0c6}},
    {{0x00011fe8a4fcd265,0x0007bcb8374faacc,0x00052f5af4ef4d4f,0x0005314098f98d10,0x0002ab91587555bd},{0x0005b0a84cee9730,0x00061d10c97155e4,0x0004059cc8096a10,0x00047a608da8014f,0x0007a164e1b9a80f},{0x0006933f0dd0d889,0x00044386bb4c4295,0x0003cb6d3162508c,0x00026368b872a2c6,0x0005a2826af12b9b}},
    {{0x000182c3a447d6ba,0x00022964e536eff2,0x000192821f540053,0x0002f9f19e788e5c,0x000154a7e73eb1b5},{0x0002bc4408a5bb33,0x000078ebdda05442,0x0002ffb112354123,0x000375ee8df5862d,0x0002945ccf146e20},{0x0003dbf1812a8285,0x0000fa17ba3f9797,0x0006f69cb49c3820,0x00034d5a0db3858d,0x00043aabe696b3bb}},
    {{0x00072c9aaa3221b1,0x000267774474f74d,0x000064b0e9b28085,0x0003f04ef53b27c9,0x0001d6edd5d2e531},{0x00025cd0944ea3bf,0x00075673b81a4d63,0x000150b925d1c0d4,0x00013f38d9294114,0x000461bea69283c9},{0x00036dc801b8b3a2,0x0000e0a7d4935e30,0x0001deb7cecc0d7d,0x000053a94e20dd2c,0x0007a9fbb1c6a0f9}},
    {{0x0006217e039d8064,0x0006dea408337e6d,0x00057ac112628206,0x000647cb65e30473,0x00049c05a51fadc9},{0x0006678aa6a8632f,0x0005ea3788d8b365,0x00021bd6d6994279,0x0007ace75919e4e3,0x00034b9ed338add7},{0x0004e8bf9045af1b,0x000514e33a45e0d6,0x0007533c5b8bfe0f,0x000583557b7e14c9,0x00073c172021b008}},
    {{0x00075b0249864348,0x00052ee11070262b,0x000237ae54fb5acd,0x0003bfd1d03aaab5,0x00018ab598029d5c},{0x000700848a802ade,0x0001e04605c4e5f7,0x0005c0d01b9767fb,0x0007d7889f42388b,0x0004275aae2546d8},{0x00032cc5fd6089e9,0x000426505c949b05,0x00046a18880c7ad2,0x0004a4221888ccda,0x0003dc65522b53df}},
    {{0x0007013b327fbf93,0x0001336eeded6a0d,0x0002b565a2bbf3af,0x000253ce89591955,0x0000267882d17602},{0x0000c222a2007f6d,0x000356b79bdb77ee,0x00041ee81efe12ce,0x000120a9bd07097d,0x000234fd7eec346f},{0x0000a119732ea378,0x00063bf1ba8e2a6c,0x00069f94cc90df9a,0x000431d1779bfc48,0x000497ba6fdaa097}},
    {{0x0003cd86468ccf0b,0x00048553221ac081,0x0006c9464b4e0a6e,0x00075fba84180403,0x00043b5cd4218d05},{0x0006cc0313cfeaa0,0x0001a313848da499,0x0007cb534219230a,0x00039596dedefd60,0x00061e22917f12de},{0x0002762f9bd0b516,0x0001c6e7fbddcbb3,0x00075909c3ace2bd,0x00042101972d3ec9,0x000511d61210ae4d}},
    {{0x000386484420de87,0x0002d6b25db68102,0x000650b4962873c0,0x0004081cfd271394,0x00071a7fe6fe2482},{0x000676ef950e9d81,0x0001b81ae089f258,0x00063c4922951883,0x0002f1d54d9b3237,0x0006d325924ddb85},{0x000182b8a5c8c854,0x00073fcbe5406d8e,0x0005de3430cff451,0x000554b967ac8c41,0x0004746c4b6559ee}},
    {{0x000546c864741147,0x0003a1df99092690,0x0001ca8cc9f4d6bb,0x00036b7fc9cd3b03,0x000219663497db5e},{0x00077b3c6dc69a2b,0x0004edf13ec2fa6e,0x0004e85ad77beac8,0x0007dba2b28e7bda,0x0005c9a51de34fe9},{0x0000f1cf79f10e67,0x00043ccb0a2b7ea2,0x00005089dfff776a,0x0001dd84e1d38b88,0x0004804503c60822}},
    {{0x000021d23a36d175,0x0004fd3373c6476d,0x00020e291eeed02a,0x00062f2ecf2e7210,0x000771e098858de4},{0x00049ed02ca37fc7,0x000474c2b5957884,0x0005b8388e816683,0x0004b6c454b76be4,0x000553398a516506},{0x0002f5d278451edf,0x000730b133997342,0x0006965420eb6975,0x000308a3bfa516cf,0x0005a5ed1d68ff5a}},
    {{0x0005e0c558527359,0x0003395b73afd75c,0x000072afa4e4b970,0x00062214329e0f6d,0x000019b60135fefd},{0x0005122afe150e83,0x0004afc966bb0232,0x0001c478833c8268,0x00017839c3fc148f,0x00044acb897d8bf9},{0x000068145e134b83,0x0001e4860982c3cc,0x000068fb5f13d799,0x0007c9283744547e,0x000150c49fde6ad2}},
    {{0x0001863c9cdca868,0x0003770e295a1709,0x0000d85a3720fd13,0x0005e0ff1f71ab06,0x00078a6d7791e05f},{0x0003f29509471138,0x000729eeb4ca31cf,0x00069c22b575bfbc,0x0004910857bce212,0x0006b2b5a075bb99},{0x0007704b47a0b976,0x0002ae82e91aab17,0x00050bd6429806cd,0x00068055158fd8ea,0x000725c7ffc4ad55}},
    {{0x00002bf71cd098c0,0x00049dabcc6cd230,0x00040a6533f905b2,0x000573efac2eb8a4,0x0004cd54625f855f},{0x00026715d1cf99b2,0x0002205441a69c88,0x000448427dcd4b54,0x0001d191e88abdc5,0x000794cc9277cb1f},{0x0006c426c2ac5053,0x0005a65ece4b095e,0x0000c44086f26bb6,0x0007429568197885,0x0007008357b6fcc8}},
    {{0x00039fbb82584a34,0x00047a568f257a03,0x00014d88091ead91,0x0002145b18b1ce24,0x00013a92a3669d6d},{0x0000672738773f01,0x000752bf799f6171,0x0006b4a6dae33323,0x0007b54696ead1dc,0x00006ef7e9851ad0},{0x0003771cc0577de5,0x0003ca06bb8b9952,0x00000b81c5d50390,0x00043512340780ec,0x0003c296ddf8a2af}},
    {{0x00034d2ebb1f2541,0x0000e815b723ff9d,0x000286b416e25443,0x0000bdfe38d1bee8,0x0000a892c7007477},{0x000515f9d914a713,0x00073191ff2255d5,0x00054f5cc2a4bdef,0x0003dd57fc118bcf,0x0007a99d393490c7},{0x0002ed2436bda3e8,0x00002afd00f291ea,0x0000be7381dea321,0x0003e952d4b2b193,0x000286762d28302f}},
    {{0x00058e2bce2ef5bd,0x00068ce8f78c6f8a,0x0006ee26e39261b2,0x00033d0aa50bcf9d,0x0007686f2a3d6f17},{0x000036093ce35b25,0x0003b64d7552e9cf,0x00071ee0fe0b8460,0x00069d0660c969e5,0x00032f1da046a9d9},{0x000512a66d597c6a,0x0000609a70a57551,0x000026c08a3c464c,0x0004531fc8ee39e1,0x000561305f8a9ad2}},
    {{0x0002cc28e7b0c0d5,0x00077b60eb8a6ce4,0x0004042985c277a6,0x000636657b46d3eb,0x000030a1aef2c57c},{0x0004978dec92aed1,0x000069adae7ca201,0x00011ee923290f55,0x00069641898d916c,0x00000aaec53e35d4},{0x0001f773003ad2aa,0x000005642cc10f76,0x00003b48f82cfca6,0x0002403c10ee4329,0x00020be9c1c24065}},
    {{0x0000e44ae2025e60,0x0005f97b9727041c,0x0005683472c0ecec,0x000188882eb1ce7c,0x00069764c545067e},{0x000387d8249673a6,0x0005bea8dc927c2a,0x0005bd8ed5650ef0,0x0000ef0e3fcd40e1,0x000750ab3361f0ac},{0x00023283a2f81037,0x000477aff97e23d1,0x0000b8958dbcbb68,0x0000205b97e8add6,0x00054f96b3fb7075}},
    {{0x0005afc616b11ecd,0x00039f4aec8f22ef,0x0003b39e1625d92e,0x0005f85bd4508873,0x00078e6839fbe85d},{0x0005f20429669279,0x00008fafae4941f5,0x00015d83c4eb7688,0x0001cf379eca4146,0x0003d7fe9c52bb75},{0x00032df737b8856b,0x0000608342f14e06,0x0003967889d74175,0x0001211907fba550,0x00070f268f350088}},
    {{0x0004112070dcf355,0x0007dcff9c22e464,0x00054ada60e03325,0x00025cd98eef769a,0x000404e56c039b8c},{0x00064583b1805f47,0x00022c1baf832cd0,0x000132c01bd4d717,0x0004ecf4c3a75b8f,0x0007c0d345cfad88},{0x00071f4b8c78338a,0x00062cfc16bc2b23,0x00017cf51280d9aa,0x0003bbae5e20a95a,0x00020d754762aaec}},
    {{0x0004feb135b9f543,0x00063bd192ad93ae,0x00044e2ea612cdf7,0x000670f4991583ab,0x00038b8ada8790b4},{0x0007c36fc73bb758,0x0004a6c797734bd1,0x0000ef248ab3950e,0x00063154c9a53ec8,0x0002b8f1e46f3cee},{0x00004a9cdf51f95d,0x0005d963fbd596b8,0x00022d9b68ace54a,0x0004a98e8836c599,0x000049aeb32ceba1}},
    {{0x00067d3c63dcfe7e,0x000112f0adc81aee,0x00053df04c827165,0x0002fe5b33b430f0,0x00051c665e0c8d62},{0x00007d0b75fc7931,0x00016f4ce4ba754a,0x0005ace4c03fbe49,0x00027e0ec12a159c,0x000795ee17530f67},{0x00025b0a52ecbd81,0x0005dc0695fce4a9,0x0003b928c575047d,0x00023bf3512686e5,0x0006cd19bf49dc54}},
    {{0x0007619052179ca3,0x0000c16593f0afd0,0x000265c4795c7428,0x00031c40515d5442,0x0007520f3db40b2e},{0x0006612165afc386,0x0001171aa36203ff,0x0002642ea820a8aa,0x0001f3bb7b313f10,0x0005e01b3a7429e4},{0x00050be3d39357a1,0x0003ab33d294a7b6,0x0004c479ba59edb3,0x0004c30d184d326f,0x00071092c9ccef3c}},
    {{0x0000523f0364918c,0x000687f56d638a7b,0x00020796928ad013,0x0005d38405a54f33,0x0000ea15b03d0257},{0x0003d8ac74051dcf,0x00010ab6f543d0ad,0x0005d0f3ac0fda90,0x0005ef1d2573e5e4,0x0004173a5bb7137a},{0x00056e31f0f9218a,0x0005635f88e102f8,0x0002cbc5d969a5b8,0x000533fbc98b347a,0x0005fc565614a4e3}},
    {{0x0006570dc46d7ae5,0x00018a9f1b91e26d,0x000436b6183f42ab,0x000550acaa4f8198,0x00062711c414c454},{0x0002e1e67790988e,0x0001e38b9ae44912,0x000648fbb4075654,0x00028df1d840cd72,0x0003214c7409d466},{0x0001827406651770,0x0004d144f286c265,0x00017488f0ee9281,0x00019e6cdb5c760c,0x0005bea94073ecb8}},
    {{0x0005bf0912c89be4,0x00062fadcaf38c83,0x00025ec196b3ce2c,0x00077655ff4f017b,0x0003aacd5c148f61},{0x0000ce63f343d2f8,0x0001e0a87d1e368e,0x000045edbc019eea,0x0006979aed28d0d1,0x0004ad0785944f1b},{0x00063b34c3318301,0x0000e0e62d04d0b1,0x000676a233726701,0x00029e9a042d9769,0x0003aff0cb1d9028}},
    {{0x0005c7eb3a20405e,0x0005fdb5aad930f8,0x0004a757e63b8c47,0x00028e9492972456,0x000110e7e86f4cd2},{0x0006430bf4c53505,0x000264c3e4507244,0x00074c9f19a39270,0x00073f84f799bc47,0x0002ccf9f732bd99},{0x0000d89ed603f5e4,0x00051e1604018af8,0x0000b8eedc4a2218,0x00051ba98b9384d0,0x00005c557e0b9693}},
    {{0x0001ce311fc97e6f,0x0006023f3fb5db1f,0x0007b49775e8fc98,0x0003ad70adbf5045,0x0006e154c178fe98},{0x0006bbb089c20eb0,0x0006df41fb0b9eee,0x00051087ed87e16f,0x000102db5c9fa731,0x000289fef0841861},{0x00016336fed69abf,0x0004f066b929f9ec,0x0004e9ff9e6c5b93,0x00018c89bc4bb2ba,0x0006afbf642a95ca}},
    {{0x0000de0c62f5d2c1,0x00049601cf734fb5,0x0006b5c38263f0f6,0x0004623ef5b56d06,0x0000db4b851b9503},{0x00055070f913a8cc,0x000765619eac2bbc,0x0003ab5225f47459,0x00076ced14ab5b48,0x00012c093cedb801},{0x00047f9308b8190f,0x000414235c621f82,0x00031f5ff41a5a76,0x0006736773aab96d,0x00033aa8799c6635}},
    {{0x0007f51ebd085cf2,0x00012cfa67e3f5e1,0x0001800cf1e3d46a,0x00054337615ff0a8,0x000233c6f29e8e21},{0x0000f588fc156cb1,0x000363414da4f069,0x0007296ad9b68aea,0x0004d3711316ae43,0x000212cd0c1c8d58},{0x0004d5107f18c781,0x00064a4fd3a51a5e,0x0004f4cd0448bb37,0x000671d38543151e,0x0001db7778911914}},
    {{0x000352397c6bc26f,0x00018a7aa0227bbe,0x0005e68cc1ea5f8b,0x0006fe3e3a7a1d5f,0x00031ad97ad26e2a},{0x00014769dd701ab6,0x00028339f1b4b667,0x0004ab214b8ae37b,0x00025f0aefa0b0fe,0x0007ae2ca8a017d2},{0x000017ed0920b962,0x000187e33b53b6fd,0x00055829907a1463,0x000641f248e0a792,0x0001ed1fc53a6622}},
    {{0x0001e98e4d89f26e,0x000510ae16fcfe97,0x0002171172ce0b7c,0x00055191edbf3682,0x0005b12b36f28bc0},{0x000642a61c092d2d,0x00031937e711d17f,0x0004dc4bedcd4122,0x0002569f0c8b3ddf,0x000503d664a57aa2},{0x0003395b90a91537,0x0006f9e6fcbe5943,0x00023a2feae6ea0f,0x0004718c95011f06,0x00036906685e9a1f}},
    {{0x00010dd8b8699e48,0x0007463aeb8f8d63,0x000760856e91c033,0x0000cf2b008ee055,0x0005b1112708474b},{0x0004be3c4fd8781d,0x000242716afc8a89,0x00016cf4e4bf3c77,0x0001d2f593f7325f,0x000355dccf04805c},{0x0005984dcb3c75db,0x0004eafecacff977,0x00016606587ed97b,0x0007b2d89c5ac45b,0x000584587b225ae4}},
    {{0x0003a363f12f57a6,0x00036677857dc672,0x0006016edd50d745,0x000777eda40c0454,0x0003d8918fb87d11},{0x0005c10f66a67ed6,0x0005997232f8890a,0x0002c8862e13ad85,0x00062a45a7ffe9c0,0x00005e27ba4b982a},{0x0006a67d1e5a864d,0x00061bc54210c7e0,0x0005a0ab3f96bab6,0x0002ed35b0884775,0x0007f8f3424d64a5}},
    {{0x0006293624794ed1,0x0000ed1e1ed161da,0x00008ef30fb86fc3,0x000362557eff0b67,0x0000caa7059c3235},{0x00024807b24886af,0x0003d8885fbc4f63,0x000115953e5523b4,0x000132d7a918d23d,0x0007e755cba0310f},{0x00044f52761a3023,0x000104d2decd135f,0x000791656699386a,0x00011871237a067e,0x0004536c2aee70b3}},
    {{0x0001a302599db7fa,0x0006fe05f844dc03,0x0001c40635bad39c,0x000238ff0dfc297f,0x0007bbdf8041ba47},{0x0003eff321ccb9c3,0x00068ca42af7119c,0x00058c5a2e68e2fd,0x0003d9ee302ff687,0x0006a15d0f5ca449},{0x0005e1f109bfa8d5,0x00073c44389e11c1,0x00025e21637093ab,0x0005bd7d979ccd1b,0x00055c206d4035cd}},
    {{0x00038159b8443d37,0x00055ad9ec9f2e2a,0x00047a7bf00acf6d,0x00075c2cce0a6006,0x000278fc8bcd74e9},{0x0007faad90de7625,0x0003c286391c6144,0x000529672e089f46,0x00061287ccedae10,0x0005cd6b3922ee71},{0x0004a994d633ebc7,0x0005cf46f4f7de07,0x00033450af844449,0x00021429fa184f70,0x000468615291ab88}},
    {{0x0001099c54a5efd2,0x00041e0af3f2ee34,0x000753ef3fd7141a,0x0006e9ee0c59c789,0x000636db66a5894e},{0x00003851d54ceb6f,0x000559bfad6ce588,0x000389e4afb488a7,0x000242fa5690a98c,0x0005523e2f353889},{0x0002536e7bd0d4de,0x00056cb47e3c535f,0x00072130d43d8496,0x0007cc447ad13e59,0x0005288cf65559b0}},
    {{0x0005c8c50a97289b,0x00075d502547f652,0x0005da24a563faae,0x00030a36eb796307,0x00063f01b555a964},{0x0002b629f0d9881c,0x00027caae1ce21f2,0x00012eebeff2c7ec,0x0000e92ff727c4a4,0x00012c70c85f4524},{0x0005bda5e538767f,0x0000fa612c198d48,0x000354cd4580a64c,0x0004aa9e49cfb4ea,0x000437165416ab62}},
    {{0x00000a2836e64b9a,0x00021e92a74e2c26,0x0007cd91d540da93,0x00011e423291a7a3,0x0003ea46dc72c2dd},{0x0005b1fbddfdad86,0x00075c96cef1bc3a,0x000603747eb606fe,0x0000dbb5bc0c8ccc,0x00046fe985f1b972},{0x0005018588e2dfa7,0x00003fa0ebdd53fe,0x000271d3959ce7d0,0x0004a735072f4bec,0x000088b0ca7df432}},
    {{0x000445337c54aa9d,0x0007cfc86df9a4c8,0x0004466d61db423a,0x0001bcf6c7d0eb4a,0x0007d5b0546110e1},{0x00070e54fefe6cc0,0x0002751ca3b2820c,0x0004d68f7c3aee75,0x000449fd4f8711fa,0x0003c755700af5ee},{0x00073a96d7c70596,0x0007615f603e6f13,0x000087035eabe3f9,0x000556b20b23346a,0x0001ae5c564b3a77}},
    {{0x0000e6863e708d5b,0x00009914b654bfb1,0x0001d176412796b7,0x0003c307983e740f,0x0005d9cf1e818af1},{0x0001ad4c0302594b,0x00028f8d4b709b41,0x0002178a904fef9b,0x000331a28073e004,0x000201a641198d92},{0x00021d3be2a1592b,0x00054c571883eb7b,0x000109312caf6eaa,0x0005932abca49e6e,0x0003aa0a0c361fe0}},
    {{0x00046e21e149ef2e,0x00004a00ce2d20cf,0x0001e2ccc2338304,0x000094d8553aae4f,0x0006ee309f230d1a},{0x00045fe508dff693,0x00056cc1f071b283,0x0001de95131f404a,0x0001a0239374eeae,0x0003e6190f708b20},{0x0000ae32ac67b877,0x0001ea8fd8412729,0x0003a126b5e8888a,0x0003a5b0ba127bd8,0x00064cde98364f1d}},
    {{0x0007d6e4071f6450,0x0001f7c3ea3ee4e1,0x0000a53ecdf4e3da,0x000418c2797ed200,0x0002c41a80e5b453},{0x0006b982b66c4ffa,0x000218c3e0b9085f,0x000654ec3ee2d06c,0x00000396913cabc3,0x00019767cc144203},{0x00060fe08e9dc54b,0x0006b2f1c309a0b7,0x0003293b11cbbbbc,0x0001f4578658a7ed,0x000393bc7b77c81c}},
    {{0x00038645b73f4755,0x0001b10773615d37,0x00070305ea7d72d4,0x000731fbdc8a9de2,0x0007c0cebbd0ca4e},{0x000367a868cd8c15,0x00074719add93627,0x0004174ad15a144f,0x00034b3df65cfb24,0x0006ebb5599ac3d3},{0x0004c5da306059bd,0x0004acefccbf4853,0x0006b25a6c99b7af,0x0006461833026867,0x0007cead1176a994}},
    {{0x00064cdb68564783,0x00003acd825866df,0x0004bb8f4c4cca1d,0x0002a8bfe5c9f091,0x00032e73d7c414d7},{0x00031e08c64de622,0x0007af71922a0c43,0x0006c048211cacec,0x00056e6e9b5b0e13,0x0007b816374fe4d0},{0x00071bc104113fcc,0x0001f1194e6b0a52,0x00017e905170f1f4,0x0000b1c793ce3aeb,0x0006f56ae3ce96f0}},
    {{0x000096ed8c1e9273,0x000068c2dacbaba7,0x0003cbdc9b7e4dad,0x00068bcdc69bd16a,0x0006ff27a9feafb3},{0x0002a3e186f6b4b9,0x00041e64af26a8ef,0x000134dafe05997e,0x000074a2b9edc733,0x0002bcbc96fc92ab},{0x0001f73e611f6329,0x0000d51039c82d81,0x0001b8b0d7c0cec5,0x000466a870023ad2,0x00072b5a5b6de284}},
    {{0x00069774ed68e720,0x0003297de2957e26,0x0006450077e37426,0x0000b3fe28b59cae,0x00061aa1160d97b7},{0x00012c4628a337c3,0x00046c67f460e78e,0x000490e5de68725e,0x00068435d2018c42,0x0003485a7aa6fde7},{0x00048a7b7f55128e,0x0006bab0c5b2e4a6,0x0003822130dd2f2d,0x0000a159b9f678b4,0x0002c6ce0503ee8d}},
    {{0x0002dfb19c632889,0x00038525489e51b0,0x0003da48697a5b33,0x0003d4f27772b64d,0x0000e77ad1d92649},{0x000717e676469b1a,0x00043c043c63d129,0x00044a290cd033b3,0x0001d3877054dc01,0x0000f8c2b5378339},{0x0002301df2db5c75,0x00021501a33bc5e3,0x000276b53f750382,0x0006fabc7001775c,0x0004cc1e54c7258d}},
    {{0x0004c0667543638e,0x00070c89c91f7e7f,0x0002a6ed9bd0987d,0x0001727ae4d753a0,0x00062ef3fdce7514},{0x0003e1d86b3ae19c,0x00028f3017a71713,0x0000d04fe40c7a9e,0x00073bc322e1cfff,0x0007294f2237a32d},{0x00008017f77d3efd,0x0003c70d3e486dcb,0x000409977a7b4776,0x0001525ed4e71ba7,0x0001928c87d15666}},
    {{0x0004955ab57e2130,0x0007b2c89ebea361,0x0002f4b265bfadfe,0x00031821023a7684,0x00077db41774458f},{0x000047d566087229,0x000156b2eb18c947,0x000738a46cb6a68b,0x00054a2baad4303a,0x0004ae0ec1d4499f},{0x0006cb9ba2be7da7,0x0003019c0fbab07a,0x000742ff1219ac76,0x000387575fd24bc9,0x00017f1b3461da31}},
    {{0x0004199b3403ce52,0x00034f6ce21cb1c9,0x0005da9cd4b28d84,0x00031368bb16bda2,0x0003d9b99a13ada9},{0x00016b3d036c2886,0x0001dc7c9cf34134,0x000105ec02eb1d75,0x000126d5e3ac73ca,0x00078a82c43f443d},{0x00038112702675c4,0x0005688d28e9c0ad,0x000712b1ffbf44e7,0x0001c8229cd3ad7b,0x0000b49208bd81bb}},
    {{0x0002dcb32d287241,0x0006b892b09826b7,0x0005a36039ecf45d,0x000290c3d6097e79,0x000157ee7b2e1f28},{0x000550fb0a0d0782,0x00062dd31ddac07f,0x0004026023ab23b5,0x00022460b1c9cc37,0x0003e40a64da2d51},{0x0005a52e9dca709f,0x000378e7ff97b2fe,0x0004b8fe54948b42,0x00075a0fadd77b78,0x0005a277115c55fb}},
    {{0x00023015328300cc,0x0007fab0f4f85562,0x0001b6e3c321fb1d,0x000777279c16beac,0x0004689b02ab17df},{0x0000d921e5854c55,0x00070dfbc6364f68,0x000048b9b89cf1ec,0x0006b9f1b1b72827,0x0000f4e191892dd3},{0x00051c12ec4132ed,0x00031b2456b7b877,0x0005c21e5387d181,0x000313c37a49ca2f,0x0003b2432ebc9edd}},
    {{0x0006ccc2b78c2e59,0x000706382f92b777,0x00070258f43764dc,0x0005dcc6ff9a04f6,0x0006c55c1f2ab2db},{0x0000899781c7d8ef,0x00010de7318502e0,0x0000db18be90ad68,0x000060da1115b11c,0x000361fd1330328d},{0x00030c8165159986,0x00022ef8a1e89a45,0x0003e81112e25ce4,0x00024358acb40b6a,0x0003cd845a927b2c}},
    {{0x000715addf6fd3b0,0x0007cf1aebd6e3a2,0x0000391b7101c8a9,0x00056887ab35ab69,0x00036121e8a0da91},{0x000506d72c1951df,0x0004bd1f05fea25e,0x00006e39d7efa8cd,0x000156aab5585124,0x00045f998ac7247f},{0x00030728c55d3ecd,0x000188cd2a66f481,0x000151333b5b850d,0x00018dffa3616ab9,0x00023b086cf066d5}},
    {{0x00035118ea05195e,0x000046f82d20b86d,0x00034a3ccac75145,0x00053a7519c28496,0x00001ebb5388c6e8},{0x00066080b4bdd58f,0x000130c6974631ac,0x0004b2f0e6f5f290,0x00030aa27f229a80,0x00016c5fa19014f1},{0x0005416ee772f53b,0x0000b9739d12a1e8,0x0002581c43263fe3,0x00002857fe94e1ab,0x0004864ef1818473}},
    {{0x0007c33297639ab3,0x0005640d1a71df02,0x000588f03cd11f1e,0x0007b62e6025c41d,0x0002a7adc0c34dba},{0x0005a83a0bd0b830,0x00037723868519a1,0x000054fbd2193bae,0x00012873379f4d82,0x00026c03aed7f6bc},{0x00067a2f581c7dce,0x00040905352db2c3,0x00062690f0ea7a25,0x0003aa486ca53ddc,0x00078b5169959e1d}},
    {{0x00018254df5d180d,0x0000ff9d3a8ca21f,0x000239c47dd41854,0x00038493ab951aa4,0x00002314bc90371e},{0x0004c85a5769cc40,0x00074ae9ba657f2b,0x00061aa0db9bfa54,0x0000da0ee5c50b2a,0x000457ec0224bcd2},{0x0000aefe8f26908a,0x0003bf6aa75a6f3d,0x0002133be85aeecc,0x000524ddc5bc9b75,0x00079572c534fcf0}},
    {{0x0005b23ca35b2d6f,0x0007572598372473,0x00065ba812ec2836,0x00079f82199bc406,0x00070ddf8d98b60e},{0x00034300e0749597,0x0004720c80988687,0x00022326917cdc98,0x00050e0a49fb55cb,0x0007890c0b6e7f19},{0x000140b7fdd75dc4,0x00030b5f02d37e92,0x0002d212168ecc0e,0x00005515ac7118f6,0x00045769691e89a7}},
    {{0x0003e305345b2ddb,0x0006bd805d736a9c,0x00055785f51ea730,0x0006c10111aef7ee,0x00010b74232f01c1},{0x00063ddc5ba643ad,0x00033d37236d6721,0x00019e76422173fb,0x00063c45d73a082b,0x0002ec0f706b05c7},{0x00021694608f59d8,0x0003f7c7a18f9f87,0x00013851c22537b8,0x000353c8285b3715,0x0005d6fa9d25a3f4}},
    {{0x00074185e46e6cbb,0x000025e447ca48db,0x0005f49918a9a730,0x0004bd3cbffafbfa,0x000645e704f775f6},{0x00045afeb2a3a6dd,0x0000f3be01ccb585,0x00027e72b699b3b4,0x00038e032665fb0c,0x000574fa41887c9e},{0x000529dade891efa,0x0005a245dcfb1925,0x00053854443ce9cf,0x000499791aacc114,0x0007420e574dcaab}},
    {{0x0006a138a034513c,0x0005e8df3a73beec,0x00051b92983f9880,0x0001e994571c80c6,0x00044ef4632b581b},{0x00066e3f94234b1c,0x0004d36843821f07,0x000711529721ed87,0x00003aa2a599d849,0x0002ba60fa9c3cdc},{0x0006491c21d364c9,0x00058ca44944b47a,0x00001c725d1768ee,0x0001e7ab7a88ece0,0x0007054899c44b5f}}
};

/* 
 Same as contract256_slidingwindow_modm, 
 except in the 4th For loop, 
 'b<=6' changed to 'b<=7' to allow S2_SWINDOWSIZE=8
*/
static void
contract256_slidingwindow_modm2(signed char r[256], const bignum256modm s, int windowsize) {
	int i,j,k,b;
	int m = (1 << (windowsize - 1)) - 1, soplen = 256;
	signed char *bits = r;
	bignum256modm_element_t v;

	/* first put the binary expansion into r  */
	for (i = 0; i < 4; i++) {
		v = s[i];
		for (j = 0; j < 56; j++, v >>= 1)
			*bits++ = (v & 1);
	}
	v = s[4];
	for (j = 0; j < 32; j++, v >>= 1)
		*bits++ = (v & 1);

	/* Making it sliding window */
	for (j = 0; j < soplen; j++) {
		if (!r[j])
			continue;

		for (b = 1; (b < (soplen - j)) && (b <= 7); b++) {
			if ((r[j] + (r[j + b] << b)) <= m) {
				r[j] += r[j + b] << b;
				r[j + b] = 0;
			} else if ((r[j] - (r[j + b] << b)) >= -m) {
				r[j] -= r[j + b] << b;
				for (k = j + b; k < soplen; k++) {
					if (!r[k]) {
						r[k] = 1;
						break;
					}
					r[k] = 0;
				}
			} else if (r[j + b]) {
				break;
			}
		}
	}
}

/* DSM_B_doublePre */
/* computes [s1]p1 + [s2]basepoint */
/* Same as 'ge25519_double_scalarmult_vartime', except the precomputed table for B is doubled */
static void 
ge25519_double_scalarmult_vartime2B(ge25519 *r, const ge25519 *p1, const bignum256modm s1, const bignum256modm s2) {
	signed char slide1[256], slide2[256];
	ge25519_pniels pre1[S1_TABLE_SIZE];
	ge25519 d1;
	ge25519_p1p1 t;
	int32_t i;

	contract256_slidingwindow_modm(slide1, s1, S1_SWINDOWSIZE);
	contract256_slidingwindow_modm2(slide2, s2, S2_SWINDOWSIZE+1);

	ge25519_double(&d1, p1);
	ge25519_full_to_pniels(pre1, p1);
	for (i = 0; i < S1_TABLE_SIZE - 1; i++)
		ge25519_pnielsadd(&pre1[i+1], &d1, &pre1[i]);

	/* set neutral */
	memset(r, 0, sizeof(ge25519));
	r->y[0] = 1;
	r->z[0] = 1;

	i = 255;
	while ((i >= 0) && !(slide1[i] | slide2[i]))
		i--;

	for (; i >= 0; i--) {
		ge25519_double_p1p1(&t, r);

		if (slide1[i]) {
			ge25519_p1p1_to_full(r, &t);
			ge25519_pnielsadd_p1p1(&t, r, &pre1[abs(slide1[i]) / 2], (unsigned char)slide1[i] >> 7);
		}

		if (slide2[i]) {
			ge25519_p1p1_to_full(r, &t);
			ge25519_nielsadd2_p1p1(&t, r, &ge25519_niels_sliding_multiples_2B[abs(slide2[i]) / 2], (unsigned char)slide2[i] >> 7);
		}

		ge25519_p1p1_to_partial(r, &t);
	}
}